<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- mvc 관련된 태그 -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- WEB-INF 에 있는 resources - 줄여짐 없는 상태인데 줄여서 사용 가능 -->
	<!-- mapping 뒤에 줄일 이름 쓰고 location은 파일 위치 쓰기 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<!-- ViewResolver이 class 이름 -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<!-- view 역할을 하는 파일을 적을 때 ViewResolver가 해결해줄거야~ -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>	
	
	<context:component-scan base-package="kh.mclass.test1" />
	<!-- component-scan: 이 안에 annotation(@) 쫙 있음 => annotation 인지하는 얘 -->	
	<!-- @Repository - dao에 걸기 -->
	<!-- @RestController - put, patch, delete를 활용해서 쓰는 controller -->
	<!-- 추가 옵션 @ - new 하는 시점들을 어떻게 new 할 것인가(activation 뒤)-->
	
	<!-- bean 객체 생성 -->

	<!-- 방법1 - @Aspect에 관련된 annotation 방식-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 방법2: root-mapper 에서 aopadvice, aopconfig, aoppointcut 을 안쓰고 이 방식 써도됨  -->
	
</beans:beans>
